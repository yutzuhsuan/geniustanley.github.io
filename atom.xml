<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>geniustanley</title>
  
  
  <link href="https://geniustanley.github.io/atom.xml" rel="self"/>
  
  <link href="https://geniustanley.github.io/"/>
  <updated>2022-01-13T16:15:51.758Z</updated>
  <id>https://geniustanley.github.io/</id>
  
  <author>
    <name>geniustanley 于子軒</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>為什麼你可能不需要intercom？潛在的成本與替代方案</title>
    <link href="https://geniustanley.github.io/2022/01/10/%E7%82%BA%E4%BB%80%E9%BA%BC%E4%BD%A0%E5%8F%AF%E8%83%BD%E4%B8%8D%E9%9C%80%E8%A6%81intercom/"/>
    <id>https://geniustanley.github.io/2022/01/10/%E7%82%BA%E4%BB%80%E9%BA%BC%E4%BD%A0%E5%8F%AF%E8%83%BD%E4%B8%8D%E9%9C%80%E8%A6%81intercom/</id>
    <published>2022-01-10T11:18:10.000Z</published>
    <updated>2022-01-13T16:15:51.758Z</updated>
    
    <content type="html"><![CDATA[<p>這篇文章所描述的狀況是身在一間新創公司實際使用 intercom 兩年以上的心得，文中所描述的需求不一定適用於每一間公司。</p><p><a href="https://www.intercom.com/">Intercom</a> 中文翻譯是對講機，顧名思義是一款能夠與用戶即時交流的軟體，從官網的 slogan 可見 <strong>&quot;Customer communications platform”(客戶交流平台) 直觀一點可以想像成客服系統</strong>，想體驗可以直接進去 <a href="https://www.intercom.com/">intercom</a>  的官方網站，點選右下角的藍色圖案，可以透過聊天室進行客服互動、問卷調查、文章分享、系統廣播。</p><p>Intercom 是非常成功的 SaaS 公司，產品跟教學中心都做得很精緻。我從以前還在念大學的時候就很喜歡，直到後來真正在做產品時終於能實裝 intercom 來服務客戶，雖然真的超爽，才發現實際使用後會產生不小的未來成本，下方也會提供替代方案。</p><p>Intercom 的<a href="https://www.intercom.com/pricing?on_pageview_event=nav">功能列表</a><strong>非常</strong>複雜，<strong>價格很不透明，常常要與 sales 聯絡</strong>，多數第一次使用這類系統的人根本無從比較這中間的細節與定價，在使用了 intercom 幾年之後，我把重要的功能歸納成兩類。</p><h3 id="我們公司常用的功能"><a href="#我們公司常用的功能" class="headerlink" title="我們公司常用的功能"></a>我們公司常用的功能</h3><ul><li>Email 客服整合</li><li>Facebook 粉專客服整合 </li><li>多人協作，以利分配客服任務</li><li>自動回覆機器人</li><li>系統廣播新資訊</li><li>用戶行為分群</li><li>幫助中心</li><li>群發 email</li></ul><h3 id="我們少用，我看其他公司常用的功能"><a href="#我們少用，我看其他公司常用的功能" class="headerlink" title="我們少用，我看其他公司常用的功能"></a>我們少用，我看其他公司常用的功能</h3><ul><li>Onboarding Product Tour (第一次使用產品的指引)</li><li>Twitter 客服整合</li><li>A/B testing (這在產品裡面做就可以了，有 App 甚至用 Push Notification 來做更好)</li></ul><p>綜合以上，intercom 不只是一個單純對講機的客服系統，而是一個使用者管理平台，intercom 完整涵蓋了使用者在產品內的不同週期。</p><p>以使用者的體驗的角度來看:</p><p>初次使用指引 ➡️ 閱讀幫助中心 ➡️ 遇到問題客服 ➡️ 接受系統通知 ➡️ 收到最新消息 email ➡️ 基於不同分群收到特定消息</p><p>除了金流 &amp; 產品本身，使用者幾乎所有體驗都被 intercom 滿足了。</p><p>但是 intercom 在這一條龍式的強大功能背後有不低的未來成本，對於還在打造 MVP 甚至尋找 PMF 的新創公司來說是非常值得注意的，由於 intercom 第一年的的巨大優惠(0.5折)會讓許多新創公司覺得先上路再說，然而在 12 個月後就會開始產生每月固定不低的收費。</p><h3 id="初看之下，第一年很優惠的-intercom-early-stage-startup-方案"><a href="#初看之下，第一年很優惠的-intercom-early-stage-startup-方案" class="headerlink" title="初看之下，第一年很優惠的 intercom early-stage(startup) 方案"></a>初看之下，第一年很優惠的 intercom early-stage(startup) 方案</h3><p>Intercom 為了降低新創公司的採用門檻，提供 <a href="%5BImgur%5D(https://imgur.com/1G3w7F7)">Early-stage 方案</a>，其中最吸引人的就是巨大的折扣。</p><h3 id="Intercom-第一年的使用費-0-5-折！"><a href="#Intercom-第一年的使用費-0-5-折！" class="headerlink" title="Intercom 第一年的使用費 0.5 折！"></a>Intercom 第一年的使用費 0.5 折！</h3><p>對，就是 0.5 折，$100 變 $5，這個方案很有誠意，非常吸引人。</p><p>下圖可以看見 <strong>5,000+ 的新創公司</strong> &amp; <strong>84% Y Combinator</strong> 的新創公司都曾經採用這個方案，看到這樣黃金的數據，還能不用嗎！<br><img src="https://i.imgur.com/FXQfxlE.png" alt="img"></p><h3 id="Early-stage-的超低門檻"><a href="#Early-stage-的超低門檻" class="headerlink" title="Early-stage 的超低門檻"></a>Early-stage 的超低門檻</h3><p>下圖是 2020/07/26 - 2020/08/26 的帳單</p><p><img src="https://i.imgur.com/1G3w7F7.png" alt="Imgur"></p><p>原價 $798(USD)，折扣後變成 $55.86，台幣不到 2000 塊，整整一年都打到骨折，光看這個帳單是非常令人心動的。</p><p>值得注意的是，early-stage 的內容是固定的，裡面的方案與功能<strong>無法</strong> 修改，其中涵蓋了以下兩個項目</p><ul><li>Accelerate plan</li><li>Product Tours</li></ul><p>Accelerate plan 是 intercom 高等級的方案，用起來特別開心。</p><p><img src="https://i.imgur.com/dxxlSCj.png" alt="Imgur"></p><h3 id="此時的美好規劃"><a href="#此時的美好規劃" class="headerlink" title="此時的美好規劃"></a>此時的美好規劃</h3><p>原本我的規劃是，先跑完一年的 Early-stage 方案，這個方案裡面有貴鬆鬆原價 $499 的 Accelerate Plan + 我們沒在用的 Product Tours，這一年每個月繳錢約為 $55~60，一年後，我們再換成 Grow 方案，把每個月的價格壓在 $119 ~ $150 (根據用量會加一些錢)</p><h3 id="其實-intercom-根本沒打算讓你回去-Start-or-Grow-了"><a href="#其實-intercom-根本沒打算讓你回去-Start-or-Grow-了" class="headerlink" title="其實 intercom 根本沒打算讓你回去 Start or Grow 了"></a>其實 intercom 根本沒打算讓你回去 Start or Grow 了</h3><p>以下幾個重要功能在 Start &amp; Grow 裡面都沒有，所以在 early-stage 結束後，幾乎不可能回去用便宜的方案，基本上就是被綁著直接衝 Accelerate plan 了，這幾個細節在使用 intercom 初期幾乎無從發現。</p><ul><li>無法有多語言的 help center</li><li>無法自動化串接 facebook</li><li>team seats 嚴重受限</li></ul><p>所以當 early-stage 結束後，即將面臨的就是從每月 $50<del>$60 上升到 $499</del>$800 (根據active contact 用量加錢，通常一年後用量一定會爆)</p><h3 id="Intercom-的替代方案"><a href="#Intercom-的替代方案" class="headerlink" title="Intercom 的替代方案"></a>Intercom 的替代方案</h3><p>搜尋以下關鍵字 “intercom alternative”, “live chat software” 之後就會看到成山成堆類似 intercom 的軟體，可能要比較好幾個晚上才能比完，我基於以下標準選了幾間我覺得最適合替代 intercom 的同類型軟體</p><ul><li>試過 code 好接</li><li>穩定</li><li>我看到其他公司用的很好</li><li>價格穩定，沒有很複雜的計價方式</li><li>符合我在 intercom 所有用到的功能</li></ul><p>以下兩間我認為是最值得一用的</p><ul><li><a href="https://crisp.chat/">Crisp Chat</a></li><li><a href="https://www.tawk.to/">Tawk</a></li></ul><h3 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h3><p>其實網路上很多文章，甚至在 Reddit 都在詬病 intercom 太昂貴以及混亂的方案跟定價策略，也可以發現 intercom 的市佔率其實不到 10%，願意花時間的話，蠻多別的選擇的。(不過嘗試的時間其實很貴)</p><p>但換個方式想，這間公司真的有本事把品牌擦亮，一些簡單的 API 串接，我們都知道伺服器沒幾個錢，但是人家就是有辦法用 usage-base 的定價來每個月收幾百幾千美金，真的是蠻屌的，而且他們做了一坨拉庫的 <a href="https://www.intercom.com/blog/podcasts/">podcast</a>, <a href="https://www.youtube.com/channel/UCJG0MvLP03kyzzAkD-w98aQ">youtube</a> ，甚至還有 <a href="https://academy.intercom.com/">academy</a>，這間公司不僅僅提供 features，而是真的在協助客戶成功。</p><p>然而對新創公司來說，這些錢有更多用途，拿去買 Mixpanel or Amplitude，甚至拿去灌 SEO 的文章數量我都覺得效益高一些。新創公司可以花錢買效率、花錢買時間，但是在這題，用大約 1/10 的錢就可以產生一樣的效益就應該把 9/10 的錢省下來。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;這篇文章所描述的狀況是身在一間新創公司實際使用 intercom 兩年以上的心得，文中所描述的需求不一定適用於每一間公司。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.intercom.com/&quot;&gt;Intercom&lt;/a&gt; 中文翻譯是對講機，顧名思義是一款能夠與</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>UVa 507 - Jill Rides Again</title>
    <link href="https://geniustanley.github.io/2017/12/25/UVa-507-Jill-Rides-Again/"/>
    <id>https://geniustanley.github.io/2017/12/25/UVa-507-Jill-Rides-Again/</id>
    <published>2017-12-25T15:47:42.000Z</published>
    <updated>2020-10-13T06:48:10.697Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://uva.onlinejudge.org/external/5/507.pdf">507 - Jill Rides Again</a></p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Maximum Subarray</p><p>Be careful of the problem description</p><blockquote><p>If more than one segment is maximally nice, choose the one with the longest cycle ride (largest j − i).<br>To break ties in longest maximal segments, choose the segment that begins with the earliest stop (lowest i).</p></blockquote><p>Carefully set your condition</p><p><code>(sum &gt; mx || (sum == mx &amp;&amp; i+1-start &gt; final_end - final_start)</code></p><h2 id="code"><a href="#code" class="headerlink" title="code"></a>code</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> b, s, n;</span><br><span class="line">  <span class="keyword">int</span> mx;</span><br><span class="line">  <span class="keyword">int</span> start, final_start, final_end;</span><br><span class="line">  <span class="keyword">int</span> sum;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;b);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> r = <span class="number">1</span>; r &lt;= b; r++) &#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;s);</span><br><span class="line"></span><br><span class="line">    sum = <span class="number">-1</span>;</span><br><span class="line">    mx = <span class="number">0</span>;</span><br><span class="line">    start = <span class="number">-1</span>;</span><br><span class="line">    final_start = <span class="number">-1</span>;</span><br><span class="line">    final_end = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; s; i++) &#123;</span><br><span class="line">      <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (sum &gt;= <span class="number">0</span>) sum += n;</span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">        sum = n;</span><br><span class="line">        start = i;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (sum &gt; mx || (sum == mx &amp;&amp; i+<span class="number">1</span>-start &gt; final_end - final_start)) &#123;</span><br><span class="line">        mx = sum;</span><br><span class="line">        final_end = i+<span class="number">1</span>;</span><br><span class="line">        final_start = start;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (mx == <span class="number">0</span>)</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;Route %d has no nice parts\n&quot;</span>, r);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;The nicest part of route %d is between stops %d and %d\n&quot;</span>, r, final_start, final_end);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://uva.onlinejudge.org/external/5/507.pdf&quot;&gt;507 - Jill Rides Again&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;Solution&quot;&gt;&lt;a href=&quot;#Solution&quot; class=&quot;head</summary>
      
    
    
    
    
    <category term="UVa" scheme="https://geniustanley.github.io/tags/UVa/"/>
    
  </entry>
  
  <entry>
    <title>UVa 437 - The Tower of Babylon</title>
    <link href="https://geniustanley.github.io/2017/12/24/UVa-437-The-Tower-of-Babylon/"/>
    <id>https://geniustanley.github.io/2017/12/24/UVa-437-The-Tower-of-Babylon/</id>
    <published>2017-12-24T12:44:25.000Z</published>
    <updated>2020-10-13T06:48:10.697Z</updated>
    
    <content type="html"><![CDATA[<p>LIS</p><a id="more"></a><p><a href="https://uva.onlinejudge.org/external/4/437.pdf">437 - The Tower of Babylon</a></p><h2 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h2><ol><li>每個 block 長寬高的組合共有六種</li><li>把六種 blog 都放進 vector</li><li>sort</li><li>做 LIS ( 條件要設定好 )</li></ol><p>p.s. 第一次用了 tuple，滿酷的哈哈</p><h2 id="code"><a href="#code" class="headerlink" title="code"></a>code</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tuple&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;tuple&lt;<span class="keyword">int</span>, <span class="keyword">int</span>, <span class="keyword">int</span>&gt; &gt; v;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span> <span class="params">(tuple&lt;<span class="keyword">int</span>, <span class="keyword">int</span>, <span class="keyword">int</span>&gt; a, tuple&lt;<span class="keyword">int</span>, <span class="keyword">int</span>, <span class="keyword">int</span>&gt; b)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> x1 = get&lt;<span class="number">0</span>&gt;(a), x2 = get&lt;<span class="number">0</span>&gt;(b),</span><br><span class="line">      y1 = get&lt;<span class="number">1</span>&gt;(a), y2 = get&lt;<span class="number">1</span>&gt;(b),</span><br><span class="line">      z1 = get&lt;<span class="number">2</span>&gt;(a), z2 = get&lt;<span class="number">2</span>&gt;(b);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (x1 &lt; x2) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (x1 == x2 &amp;&amp; y1 &lt; y2) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (x1 == x2 &amp;&amp; y1 == y2 &amp;&amp; z1 &lt; z2) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> n;</span><br><span class="line">  <span class="keyword">int</span> kase = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">int</span> x, y, z;</span><br><span class="line">  <span class="keyword">int</span> LIS[<span class="number">200</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (EOF != <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n) &amp;&amp; n) &#123;</span><br><span class="line"></span><br><span class="line">    v.clear();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">      <span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d&quot;</span>, &amp;x, &amp;y, &amp;z);</span><br><span class="line">      v.push_back(tuple&lt;<span class="keyword">int</span>, <span class="keyword">int</span>, <span class="keyword">int</span>&gt;(x, y, z));</span><br><span class="line">      v.push_back(tuple&lt;<span class="keyword">int</span>, <span class="keyword">int</span>, <span class="keyword">int</span>&gt;(y, x, z));</span><br><span class="line">      v.push_back(tuple&lt;<span class="keyword">int</span>, <span class="keyword">int</span>, <span class="keyword">int</span>&gt;(x, z, y));</span><br><span class="line">      v.push_back(tuple&lt;<span class="keyword">int</span>, <span class="keyword">int</span>, <span class="keyword">int</span>&gt;(z, x, y));</span><br><span class="line">      v.push_back(tuple&lt;<span class="keyword">int</span>, <span class="keyword">int</span>, <span class="keyword">int</span>&gt;(y, z, x));</span><br><span class="line">      v.push_back(tuple&lt;<span class="keyword">int</span>, <span class="keyword">int</span>, <span class="keyword">int</span>&gt;(z, y, x));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    sort(v.begin(), v.begin()+<span class="number">6</span>*n, cmp);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n*<span class="number">6</span>; i++)</span><br><span class="line">      LIS[i] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n*<span class="number">6</span>; i++) &#123;</span><br><span class="line">      LIS[i] = get&lt;<span class="number">2</span>&gt;(v[i]);</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">        <span class="keyword">int</span> x1 = get&lt;<span class="number">0</span>&gt;(v[i]), x2 = get&lt;<span class="number">0</span>&gt;(v[j]),</span><br><span class="line">            y1 = get&lt;<span class="number">1</span>&gt;(v[i]), y2 = get&lt;<span class="number">1</span>&gt;(v[j]);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (x1 &gt; x2 &amp;&amp; y1 &gt; y2 &amp;&amp; LIS[j] + get&lt;<span class="number">2</span>&gt;(v[i]) &gt;  LIS[i])</span><br><span class="line">          LIS[i] = LIS[j] + get&lt;<span class="number">2</span>&gt;(v[i]);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> mx = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n*<span class="number">6</span>; i++)</span><br><span class="line">      <span class="keyword">if</span> (mx &lt; LIS[i])</span><br><span class="line">        mx = LIS[i];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Case %d: maximum height = %d\n&quot;</span>, ++kase, mx);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;LIS&lt;/p&gt;</summary>
    
    
    
    
    <category term="UVa" scheme="https://geniustanley.github.io/tags/UVa/"/>
    
  </entry>
  
  <entry>
    <title>UVa 231 - Testing the CATCHER</title>
    <link href="https://geniustanley.github.io/2017/12/14/UVa-231-Testing-the-CATCHER/"/>
    <id>https://geniustanley.github.io/2017/12/14/UVa-231-Testing-the-CATCHER/</id>
    <published>2017-12-14T04:24:19.000Z</published>
    <updated>2020-10-13T06:48:10.697Z</updated>
    
    <content type="html"><![CDATA[<p>LIS ( 其實是 LDS Longest Decreasing Subsequence ) xD</p><a id="more"></a><p><a href="https://uva.onlinejudge.org/external/2/231.pdf">231 - Testing the CATCHER</a></p><h2 id="code"><a href="#code" class="headerlink" title="code"></a>code</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> m[<span class="number">100005</span>];</span><br><span class="line">  <span class="keyword">int</span> length[<span class="number">100005</span>];</span><br><span class="line">  <span class="keyword">int</span> kase = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> n = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;m[n++])) &#123;</span><br><span class="line">      <span class="keyword">if</span> (m[n<span class="number">-1</span>] == <span class="number">-1</span>) <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (m[<span class="number">0</span>] == <span class="number">-1</span>) <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100005</span>; i++)</span><br><span class="line">      length[i] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n<span class="number">-1</span>; i++)</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; j++)</span><br><span class="line">        <span class="keyword">if</span> (m[j] &gt; m[i])</span><br><span class="line">          length[i] = max(length[i], length[j] + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = n<span class="number">-1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">      ans = max(ans, length[i]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (kase)</span><br><span class="line">      <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Test #%d:\n&quot;</span>, ++kase);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;  maximum possible interceptions: %d\n&quot;</span>, ans);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;LIS ( 其實是 LDS Longest Decreasing Subsequence ) xD&lt;/p&gt;</summary>
    
    
    
    
    <category term="UVa" scheme="https://geniustanley.github.io/tags/UVa/"/>
    
  </entry>
  
  <entry>
    <title>UVa 562 - Dividing coins</title>
    <link href="https://geniustanley.github.io/2017/12/13/UVa-562-Dividing-coins/"/>
    <id>https://geniustanley.github.io/2017/12/13/UVa-562-Dividing-coins/</id>
    <published>2017-12-13T13:52:13.000Z</published>
    <updated>2020-10-13T06:48:10.697Z</updated>
    
    <content type="html"><![CDATA[<p>0-1 knapsack</p><a id="more"></a><p><a href="https://uva.onlinejudge.org/external/5/562.pdf">562 - Dividing coins</a></p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>把所有錢幣加起來除以二當作背包大小</p><h2 id="code"><a href="#code" class="headerlink" title="code"></a>code</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> T, m;</span><br><span class="line">  <span class="keyword">int</span> n[<span class="number">105</span>];</span><br><span class="line">  <span class="keyword">int</span> dp[<span class="number">100005</span>];</span><br><span class="line">  <span class="keyword">int</span> sum;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;T);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;m);</span><br><span class="line"></span><br><span class="line">    sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">      <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n[i]);</span><br><span class="line">      sum += n[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">memset</span>(dp, <span class="number">0</span>, <span class="keyword">sizeof</span>(dp));</span><br><span class="line">    <span class="keyword">int</span> average = sum / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> j = average; j &gt;= n[i]; j--) &#123;</span><br><span class="line">        dp[j] = max(dp[j], dp[j - n[i]] + n[i]);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, sum - dp[average] - dp[average]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;0-1 knapsack&lt;/p&gt;</summary>
    
    
    
    
    <category term="UVa" scheme="https://geniustanley.github.io/tags/UVa/"/>
    
  </entry>
  
  <entry>
    <title>UVa 10130 - SuperSale</title>
    <link href="https://geniustanley.github.io/2017/12/13/UVa-10130-SuperSale/"/>
    <id>https://geniustanley.github.io/2017/12/13/UVa-10130-SuperSale/</id>
    <published>2017-12-13T06:42:12.000Z</published>
    <updated>2020-10-13T06:48:10.691Z</updated>
    
    <content type="html"><![CDATA[<p>0-1 knapsack</p><a id="more"></a><p><a href="https://uva.onlinejudge.org/external/101/10130.pdf">10130 - SuperSale</a></p><h2 id="細節"><a href="#細節" class="headerlink" title="細節"></a>細節</h2><p>原本看題目還以為跟台灣大賣場一樣，每卡每個商品限購一個，都寫完才發現 sample output 只是對每個家人都做一次 0-1 knapsack 超簡單Q_Q</p><h2 id="code"><a href="#code" class="headerlink" title="code"></a>code</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> T, N;</span><br><span class="line">  <span class="keyword">int</span> P[<span class="number">1005</span>], W[<span class="number">1005</span>];</span><br><span class="line">  <span class="keyword">int</span> G;</span><br><span class="line">  <span class="keyword">int</span> MW[<span class="number">105</span>];</span><br><span class="line">  <span class="keyword">int</span> c[<span class="number">35</span>];</span><br><span class="line"></span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;T);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;N);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">      <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;P[i], &amp;W[i]);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;G);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; G; i++)</span><br><span class="line">      <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;MW[i]);</span><br><span class="line"></span><br><span class="line">    sort(MW, MW+G);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; G; i++) &#123;</span><br><span class="line">      <span class="built_in">memset</span>(c, <span class="number">0</span>, <span class="keyword">sizeof</span>(c));</span><br><span class="line"></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; N; j++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = MW[i]; k &gt;= W[j]; k--) &#123;</span><br><span class="line">          <span class="keyword">if</span> (c[k] &lt; c[k-W[j]] + P[j]) &#123;</span><br><span class="line">            c[k] = c[k-W[j]] + P[j];</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;;</span><br><span class="line">      ans += c[MW[i]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line">    <span class="comment">// printf(&quot;%d\n&quot;, c[MW[0]]);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;0-1 knapsack&lt;/p&gt;</summary>
    
    
    
    
    <category term="UVa" scheme="https://geniustanley.github.io/tags/UVa/"/>
    
  </entry>
  
  <entry>
    <title>UVa 10819 - Trouble of 13-Dots</title>
    <link href="https://geniustanley.github.io/2017/12/12/UVa-10819-Trouble-of-13-Dots/"/>
    <id>https://geniustanley.github.io/2017/12/12/UVa-10819-Trouble-of-13-Dots/</id>
    <published>2017-12-12T11:25:57.000Z</published>
    <updated>2020-10-13T06:48:10.693Z</updated>
    
    <content type="html"><![CDATA[<p>0-1 knapsack</p><a id="more"></a><p><a href="https://uva.onlinejudge.org/external/108/10819.pdf">10819 - Trouble of 13-Dots</a></p><h2 id="細節"><a href="#細節" class="headerlink" title="細節"></a>細節</h2><p>0-1 knapsack 處理完後，要檢查是否符合 refund 條件</p><p>考慮如下 input</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1900 3</span><br><span class="line">2000 5</span><br><span class="line">1950 1</span><br><span class="line">101  1</span><br></pre></td></tr></table></figure><p>答案為 2，因為 $2000 不符合 refund 條件 ( 題目：exceeds $2000 )</p><p>解法</p><ol><li>knapsack ( range: 0 ~ m+200 )</li><li>如果 <code>1800 &lt; m &lt;= 2000</code>，則答案會出現在 <code>0 ~ m, 2001 ~ m+200</code> <br>( 以上面的例子來說，預算為 $1900，所以 13-DOT 只能花 0 ~ $1900 or $2001 ~ $2100，不能花 $2000 買 favour index = 5 的東西 )</li></ol><h2 id="code"><a href="#code" class="headerlink" title="code"></a>code</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> weight[<span class="number">105</span>], cost[<span class="number">105</span>];</span><br><span class="line"><span class="keyword">int</span> c[<span class="number">10220</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> m, n;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (EOF != <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;m, &amp;n)) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">      <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;weight[i], &amp;cost[i]);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">memset</span>(c, <span class="number">0</span>, <span class="keyword">sizeof</span>(c));</span><br><span class="line">    <span class="keyword">if</span> (m &gt; <span class="number">1800</span>) m += <span class="number">200</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> j = m; j - weight[i] &gt;= <span class="number">0</span>; j--)</span><br><span class="line">        <span class="keyword">if</span> (c[j-weight[i]] &gt; <span class="number">0</span> || j == weight[i])</span><br><span class="line">          c[j] = max(c[j], c[j-weight[i]]+cost[i]);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 這邊寫很醜還請見諒 */</span></span><br><span class="line">    <span class="keyword">int</span> k = m<span class="number">-200</span>;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (k &gt; <span class="number">1800</span> &amp;&amp; k &lt;= <span class="number">2000</span>) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; i++)</span><br><span class="line">        ans = max(ans, c[i]);</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2001</span>; i &lt;= m; i++)</span><br><span class="line">        ans = max(ans, c[i]);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= m; i++)</span><br><span class="line">        ans = max(ans, c[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;0-1 knapsack&lt;/p&gt;</summary>
    
    
    
    
    <category term="UVa" scheme="https://geniustanley.github.io/tags/UVa/"/>
    
  </entry>
  
  <entry>
    <title>UVa 11517 - Exact Change</title>
    <link href="https://geniustanley.github.io/2017/12/11/UVa-11517-Exact-Change/"/>
    <id>https://geniustanley.github.io/2017/12/11/UVa-11517-Exact-Change/</id>
    <published>2017-12-10T22:22:47.000Z</published>
    <updated>2020-10-13T06:48:10.695Z</updated>
    
    <content type="html"><![CDATA[<p>DP</p><a id="more"></a><p><a href="https://uva.onlinejudge.org/external/115/11517.pdf">11517 - Exact Change</a></p><h2 id="心得"><a href="#心得" class="headerlink" title="心得"></a>心得</h2><p>這題直覺想到是 DP ，否則就要 O(2^N)，但是具體作法一直沒想出來，一直朝著 0-1knapsack 的遞迴 DP 去想</p><p>最後看了 Morris 大才發現超簡單</p><p>ref: <a href="https://github.com/morris821028/UVa/blob/master/volume115/11517%20-%20Exact%20Change.cpp">Morris</a></p><blockquote><p>稍微改了一點 我覺得 mx 那邊的優化不會快很多 但是拿掉 mx code 乾淨一些</p></blockquote><h2 id="code"><a href="#code" class="headerlink" title="code"></a>code</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> T;</span><br><span class="line">  <span class="keyword">int</span> price;</span><br><span class="line">  <span class="keyword">int</span> n;</span><br><span class="line">  <span class="keyword">int</span> coin;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;T);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (T--) &#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;price);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> dp[<span class="number">10005</span>] = &#123;&#125;;</span><br><span class="line">    dp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">      <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;coin);</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">10000</span>; j - coin &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">        <span class="keyword">if</span> (dp[j] == <span class="number">0</span> || dp[j] &gt; dp[j-coin] + <span class="number">1</span>) &#123;</span><br><span class="line">          <span class="keyword">if</span> (dp[j-coin]) &#123;</span><br><span class="line">            dp[j] = dp[j-coin] + <span class="number">1</span>;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (!dp[price]) price++;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>, price, dp[price]<span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;DP&lt;/p&gt;</summary>
    
    
    
    
    <category term="UVa" scheme="https://geniustanley.github.io/tags/UVa/"/>
    
  </entry>
  
  <entry>
    <title>UVa 11479 - Is this the easiest problem?</title>
    <link href="https://geniustanley.github.io/2017/12/09/UVa-11479-Is-this-the-easiest-problem/"/>
    <id>https://geniustanley.github.io/2017/12/09/UVa-11479-Is-this-the-easiest-problem/</id>
    <published>2017-12-09T05:27:19.000Z</published>
    <updated>2020-10-13T06:48:10.695Z</updated>
    
    <content type="html"><![CDATA[<p>水題，判斷三角形</p><a id="more"></a><p><a href="https://uva.onlinejudge.org/external/114/11479.pdf">11479 - Is this the easiest problem?</a></p><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><ol><li><p>題目 <strong>Each of the next T lines will contain three 32 bit signed integer.</strong> 要用 <code>unsigned</code> 或者 <code>long long</code> 不然會錯</p></li><li><p>三角形是 兩短邊相加<strong>大於</strong> 第三邊，所以 code 要寫 <code>&lt;=</code> ( 我腦殘寫了 <code>&lt;</code> 吃了一個 <span style="font-weight: bold;color: red">WA</span> )</p></li><li><p>沒有等腰直角三角形</p></li></ol><h2 id="code"><a href="#code" class="headerlink" title="code"></a>code</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> T;</span><br><span class="line">  <span class="keyword">long</span> <span class="keyword">long</span> s[<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;T);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= T; i++) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Case %d: &quot;</span>, i);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lld %lld %lld&quot;</span>, &amp;s[<span class="number">0</span>], &amp;s[<span class="number">1</span>], &amp;s[<span class="number">2</span>]);</span><br><span class="line">    sort(s, s+<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (s[<span class="number">0</span>] + s[<span class="number">1</span>] &lt;= s[<span class="number">2</span>]) &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;Invalid\n&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (s[<span class="number">0</span>] == s[<span class="number">1</span>] &amp;&amp; s[<span class="number">1</span>] == s[<span class="number">2</span>]) &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;Equilateral\n&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (s[<span class="number">0</span>] == s[<span class="number">1</span>] || s[<span class="number">1</span>] == s[<span class="number">2</span>]) &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;Isosceles\n&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;Scalene\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;水題，判斷三角形&lt;/p&gt;</summary>
    
    
    
    
    <category term="UVa" scheme="https://geniustanley.github.io/tags/UVa/"/>
    
  </entry>
  
  <entry>
    <title>UVa 686 - Goldbach&#39;s Conjecture (II)</title>
    <link href="https://geniustanley.github.io/2017/12/08/UVa-686-Goldbach-s-Conjecture-II/"/>
    <id>https://geniustanley.github.io/2017/12/08/UVa-686-Goldbach-s-Conjecture-II/</id>
    <published>2017-12-08T13:31:19.000Z</published>
    <updated>2020-10-13T06:48:10.698Z</updated>
    
    <content type="html"><![CDATA[<p>質數表，建完查表，2^15 很小所以沒優化也會過</p><a id="more"></a><p><a href="https://uva.onlinejudge.org/external/6/686.pdf">686 - Goldbach’s Conjecture (II)</a></p><h2 id="code"><a href="#code" class="headerlink" title="code"></a>code</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> p[<span class="number">33000</span>] = &#123;&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">prime</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; <span class="number">33000</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!p[i]) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">2</span>; i * j &lt; <span class="number">33000</span>; j++) &#123;</span><br><span class="line">        p[i*j] = <span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  prime();</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">int</span> n;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (EOF != <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n) &amp;&amp; n) &#123;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n/<span class="number">2</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!p[i] &amp;&amp; !p[n-i])</span><br><span class="line">        ans++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;質數表，建完查表，2^15 很小所以沒優化也會過&lt;/p&gt;</summary>
    
    
    
    
    <category term="UVa" scheme="https://geniustanley.github.io/tags/UVa/"/>
    
  </entry>
  
  <entry>
    <title>UVa 10474 - Where is the Marble?</title>
    <link href="https://geniustanley.github.io/2017/12/08/UVa-10474-Where-is-the-Marble/"/>
    <id>https://geniustanley.github.io/2017/12/08/UVa-10474-Where-is-the-Marble/</id>
    <published>2017-12-07T17:21:47.000Z</published>
    <updated>2020-10-13T06:48:10.692Z</updated>
    
    <content type="html"><![CDATA[<p>水題</p><a id="more"></a><p><a href="https://uva.onlinejudge.org/external/104/10474.pdf">UVA 10474 - Where is the Marble?</a></p><h2 id="code"><a href="#code" class="headerlink" title="code"></a>code</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> N, Q;</span><br><span class="line">  <span class="keyword">int</span> x, y[<span class="number">10005</span>];</span><br><span class="line">  <span class="keyword">int</span> c = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (EOF != <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;N, &amp;Q) &amp;&amp; (N || Q)) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;CASE# %d:\n&quot;</span>, ++c);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">      <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;y[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    sort(y, y+N);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; Q; i++) &#123;</span><br><span class="line">      <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x);</span><br><span class="line">      <span class="keyword">int</span> found = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; N; j++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (y[j] == x) &#123;</span><br><span class="line">          <span class="built_in">printf</span>(<span class="string">&quot;%d found at %d\n&quot;</span>, x, j+<span class="number">1</span>);</span><br><span class="line">          found = <span class="number">1</span>;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (!found) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d not found\n&quot;</span>, x);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;水題&lt;/p&gt;</summary>
    
    
    
    
    <category term="UVa" scheme="https://geniustanley.github.io/tags/UVa/"/>
    
  </entry>
  
  <entry>
    <title>ASC17 參賽心得 - LAMMPS</title>
    <link href="https://geniustanley.github.io/2017/07/03/ASC17-%E5%8F%83%E8%B3%BD%E5%BF%83%E5%BE%97-LAMMPS/"/>
    <id>https://geniustanley.github.io/2017/07/03/ASC17-%E5%8F%83%E8%B3%BD%E5%BF%83%E5%BE%97-LAMMPS/</id>
    <published>2017-07-02T18:46:02.000Z</published>
    <updated>2020-10-13T06:48:10.689Z</updated>
    
    <content type="html"><![CDATA[<p>之前想說要紀錄一下去年的 SC16 參賽心得結果拖著沒寫，現在 ASC17 都結束了，那就先寫 ASC17 吧</p><a id="more"></a><h2 id="感謝"><a href="#感謝" class="headerlink" title="感謝"></a>感謝</h2><p>雖然全名很怪，不過感覺感謝文要打全名</p><p>謝謝 隊長<strong>尤立宇</strong> 隊長<strong>王宇正</strong> 隊友<strong>翁子皓</strong> 隊友<strong>何憶琳</strong><br>謝謝 <strong>周志遠</strong>老師 <strong>李哲榮</strong>老師 教練<strong>陳振群</strong> 教練<strong>郭柏妤</strong> 教練<strong>陳維駿</strong></p><p>這次比賽都是靠他們各位的努力才能有今天的成績，我要畢業了，希望他們年底以及明年可以有更好的成績</p><h2 id="ASC17"><a href="#ASC17" class="headerlink" title="ASC17"></a>ASC17</h2><p>今年四月底參加 <strong>2017 ASC 世界大學生超級計算機競賽 ( ASC17 )</strong> 獲得了一等獎 ( 第三名 )</p><p>初賽是從 230 支隊伍中選出前 20 名入圍決賽，決賽地點在太湖無錫</p><p>以下是隊伍名單 ( 照最終名次 )</p><p>Tsinghua University<br>Beihang University<br>National Tsing Hua University<br>Sun Yat-sen University<br>Shanghai Jiao Tong University<br>University of Warsaw<br>Dalian University of Technology<br>Hong Kong Baptist University<br>Northwestern Polytechnical University<br>Weifang University<br>Taiyuan University of Technology<br>Southeast University<br>University of Erlangen-Nuremberg<br>Zhengzhou University<br>Ocean University of China<br>Ural Federal University<br>Huazhong University of Science and Technology<br>The PLA Information Engineering University<br>Saint Petersburg State University<br>University of Miskolc</p><h2 id="目錄"><a href="#目錄" class="headerlink" title="目錄"></a>目錄</h2><p>其實在我有不同的事情想寫，然而我不太確定該怎麼寫比較順，所以我決定把項目條列下來，請看自己有興趣的部份囉</p><p>另外，由於我負責 LAMMPS 的部份，所以就比賽的技術細節我也只寫 LAMMPS</p><p><a href="#Lammps%E5%81%9A%E4%BA%86%E4%BB%80%E9%BA%BC%EF%BC%9F%E9%82%84%E8%83%BD%E5%81%9A%E4%BB%80%E9%BA%BC">LAMMPS 做了什麼？還能做什麼</a></p><p><a href="#%E9%A3%9F%E5%AE%BF%E9%A0%97%E6%9C%89%E6%B0%B4%E6%BA%96%EF%BC%8C%E6%9C%89%E4%BA%9B%E7%9C%8B%E4%BC%BC%E5%81%87%E7%9A%84%E4%BA%8B%E6%83%85%E8%8A%B1%E9%8C%A2%E5%B0%B1%E6%9C%83%E8%AE%8A%E6%88%90%E7%9C%9F%E7%9A%84">食宿頗有水準，有些看似假的事情花錢就會變成真的</a></p><p><a href="#%E6%87%BA%E6%82%94%E4%B8%80%E4%B8%8B%E6%88%91%E5%9C%A8%E6%BA%96%E5%82%99%E6%AF%94%E8%B3%BD%E7%9A%84%E5%BF%83%E6%85%8B">懺悔一下我在準備比賽的心態</a></p><p><a href="#%E6%88%91%E6%89%80%E8%A6%8B%E7%9A%84%E5%85%B1%E4%BA%AB%E7%B6%93%E6%BF%9F%EF%BC%8C%E8%B7%91%E8%BB%8A%EF%BC%8C%E7%AC%AC%E4%B8%89%E6%96%B9%E6%94%AF%E4%BB%98">我所見的共享經濟，跑車，第三方支付</a></p><p><a href="#%E6%AF%94%E8%B3%BD%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B0%8F%E7%8B%80%E6%B3%81">比賽的一些小狀況</a></p><p><a href="#%E6%AF%94%E8%B3%BD%E6%99%82%E7%AB%9F%E7%84%B6%E7%93%B6%E8%A3%9D%E6%B0%B4%E5%96%9D%E5%88%B0%E7%88%BD%EF%BC%8C%E9%82%84%E6%9C%83%E5%83%8F%E5%90%83buffet%E9%82%A3%E6%A8%A3%E5%B9%AB%E4%BD%A0%E6%94%B6">比賽時竟然瓶裝水喝到爽，還會像吃buffet那樣幫你收</a></p><p><a href="#%E6%88%91%E5%80%91%E4%B9%9F%E6%BB%BF%E4%B8%8D%E9%8C%AF%E7%9A%84%E9%98%BF">我們也滿不錯的阿</a></p><p><a href="#%E6%BB%BF%E5%9C%B0P100">滿地P100</a></p><p><a href="#%E5%A4%AA%E6%B9%96%E7%84%A1%E9%8C%AB%E8%B6%85%E7%AE%97%E4%B8%AD%E5%BF%83%E5%B0%8D%E6%96%BC%E7%A5%9E%E5%A8%81%E7%9B%AE%E5%89%8D%E7%BC%BA%E9%BB%9E%E6%89%80%E5%B1%95%E7%8F%BE%E7%9A%84%E9%AB%98%E5%BA%A6">太湖無錫超算中心對於神威目前缺點所展現的高度</a></p><p><a href="#%E4%B8%8D%E6%81%A5%E4%B8%8B%E5%95%8F%EF%BC%8C%E7%99%BD%E7%97%B4%E6%9C%89%E6%99%82%E5%BE%8C%E6%98%AF%E6%94%B6%E7%A9%AB%E6%9C%80%E5%A4%9A%E7%9A%84">不恥下問，白痴有時後是收穫最多的</a></p><p><a href="#%E8%A8%B1%E5%A4%9A%E5%A4%A7%E5%AD%B8%E6%95%B4%E9%9A%8A%E7%9A%84%E9%81%B8%E6%89%8B%E9%83%BD%E6%98%AF%E5%A4%A7%E4%B8%89%E7%9A%84%E5%B0%8F%E9%AE%AE%E8%82%89">許多大學整隊的選手都是大三的小鮮肉</a></p><p><a href="#%E8%88%87%E5%85%B6%E4%BB%96%E9%9A%8A%E4%BC%8D%E8%81%8A%E5%88%B0%E6%8B%9B%E7%94%9F%E7%9A%84%E7%AA%98%E5%A2%83">與其他隊伍聊到招生的窘境</a></p><p><a href="#%E5%BE%B7%E5%9C%8B%E4%BA%BA%E7%AB%9F%E7%84%B627%E6%AD%B2">德國人竟然27歲</a></p><p><a href="#%E8%AC%9D%E8%AC%9D%E9%9A%8A%E5%8F%8B">謝謝隊友</a></p><h2 id="Lammps做了什麼？還能做什麼"><a href="#Lammps做了什麼？還能做什麼" class="headerlink" title="Lammps做了什麼？還能做什麼"></a>Lammps做了什麼？還能做什麼</h2><p>我負責的項目是 LAMMPS<br>現在是2018/05/16，果然我忘了我要寫啥，想到再補</p><h2 id="食宿頗有水準，有些看似假的事情花錢就會變成真的"><a href="#食宿頗有水準，有些看似假的事情花錢就會變成真的" class="headerlink" title="食宿頗有水準，有些看似假的事情花錢就會變成真的"></a>食宿頗有水準，有些看似假的事情花錢就會變成真的</h2><p>我們住宿是在無錫的一個公寓式酒店內，兩人一間，早餐吃西式 buffet，風景很不錯，錢花下去，品質就會出來<br><img src="https://i.imgur.com/jA4Q0mZ.png" alt="Imgur"></p><h2 id="懺悔一下我在準備比賽的心態"><a href="#懺悔一下我在準備比賽的心態" class="headerlink" title="懺悔一下我在準備比賽的心態"></a>懺悔一下我在準備比賽的心態</h2><p>我一開始跟宇正負責<a href="http://221.0.186.5/IOC-WESTPAC_OFDS/model.html">MASNUM</a>，由於 source code 是用 FORTRAN 寫的，我遇到不喜歡的語言一整個心態崩潰，所以後來跑去準備 LAMMPS，看著學弟刻苦的完成 MASNUM 真的覺得自己是該檢討一下態度</p><h2 id="我所見的共享經濟，跑車，第三方支付"><a href="#我所見的共享經濟，跑車，第三方支付" class="headerlink" title="我所見的共享經濟，跑車，第三方支付"></a>我所見的共享經濟，跑車，第三方支付</h2><p>路邊一大堆腳踏車，也看見跑車在路上跑，幾乎所有的付款方式都變成行動支付<br>我不想沒意義的比較或評論誰優誰劣，單純想表達無錫跟我想的不太一樣，無錫似乎比我想像的還要進步很多</p><h2 id="比賽的一些小狀況"><a href="#比賽的一些小狀況" class="headerlink" title="比賽的一些小狀況"></a>比賽的一些小狀況</h2><p>現在是2018/05/16，果然我忘了我要寫啥，想到再補</p><h2 id="比賽時竟然瓶裝水喝到爽，還會像吃buffet那樣幫你收"><a href="#比賽時竟然瓶裝水喝到爽，還會像吃buffet那樣幫你收" class="headerlink" title="比賽時竟然瓶裝水喝到爽，還會像吃buffet那樣幫你收"></a>比賽時竟然瓶裝水喝到爽，還會像吃buffet那樣幫你收</h2><p>我有點不知道該怎麼形容這件事情，說爽是很爽，不過覺得很浪費，瓶裝水一瓶接一瓶喝，喝完放在桌上還會有阿姨來收</p><h2 id="我們也滿不錯的阿"><a href="#我們也滿不錯的阿" class="headerlink" title="我們也滿不錯的阿"></a>我們也滿不錯的阿</h2><p>事實上，台灣小歸小，備賽期間，我們也沒獲得什麼神奇的神助，也沒有什麼超級研究團隊幫我們，我們就是躲在小小的會議室，一次一次的咪挺，一次一次的上網找資料，實做，研究，分析，慢慢的拼湊出整個比賽的項目</p><p>這樣的我們，其實在國際賽場上，也是不會輸人的，所以請看到這篇文的各位，請不要妄自菲薄，我懂其他國家有各式各樣優秀的資源，但是在我們沒有拿到這些資源以前，我們還是有很多努力空間，也能夠到達某種高度，加油</p><h2 id="滿地P100"><a href="#滿地P100" class="headerlink" title="滿地P100"></a>滿地P100</h2><p><a href="http://www.nvidia.com.tw/object/tesla-p100-tw.html">P100</a> 在 2017 四月的當下，是神卡，我以為我們有這卡很神，結果大家都有，不誇張，就是<strong>大家</strong></p><p>P100 大約一張 <a href="https://www.amazon.com/NVIDIA-Tesla-P100-computing-processor/dp/B06WV7HFWV">7000鎂</a>(20萬台幣左右)，超級計算機競賽基本起跳需要 8 張卡</p><h2 id="太湖無錫超算中心對於神威目前缺點所展現的高度"><a href="#太湖無錫超算中心對於神威目前缺點所展現的高度" class="headerlink" title="太湖無錫超算中心對於神威目前缺點所展現的高度"></a>太湖無錫超算中心對於神威目前缺點所展現的高度</h2><p>我原本以為這個特製的超級電腦就是要炫耀用的，所以絕對會絕口不提缺點，沒想到超算中心的最高負責人，在致詞的時候，竟然直接說，很多軟體跑不起來，希望大家共同努力，而且是在全世界的參賽隊伍面前，我跟小夥伴們都傻了，真的很有種哈哈哈</p><h2 id="不恥下問，白痴有時後是收穫最多的"><a href="#不恥下問，白痴有時後是收穫最多的" class="headerlink" title="不恥下問，白痴有時後是收穫最多的"></a>不恥下問，白痴有時後是收穫最多的</h2><p>我覺得如果有不懂的事情，直接把自己當白痴去問別人，有時候會得到許多意外的收穫，這真的很重要，不管對方年紀是否比自己小，只要對方有值得學習的地方，就值得好好向對方請教。</p><h2 id="許多大學整隊的選手都是大三的小鮮肉"><a href="#許多大學整隊的選手都是大三的小鮮肉" class="headerlink" title="許多大學整隊的選手都是大三的小鮮肉"></a>許多大學整隊的選手都是大三的小鮮肉</h2><p>好多隊伍都是派大三的學生當選手出賽，覺得自己大四真的是老屁股，還沒虐翻全場真的說不過去</p><h2 id="與其他隊伍聊到招生的窘境"><a href="#與其他隊伍聊到招生的窘境" class="headerlink" title="與其他隊伍聊到招生的窘境"></a>與其他隊伍聊到招生的窘境</h2><p>與其他隊伍聊天，聊到同學多數會選擇去大公司(中國谷歌，BAT等等)實習，願意花漫長時間準備不知道是否有收穫的比賽的人越來越少了。</p><p>No Comment，各自的選擇。</p><h2 id="德國人竟然27歲"><a href="#德國人竟然27歲" class="headerlink" title="德國人竟然27歲"></a>德國人竟然27歲</h2><p>跟德國隊伍稍微聊了一下，鬍子哥竟然27歲，正在念大學中，他說他高中畢業之後工作了一段時間，後來才決定念資工。<br>我想這種人在台灣八成很難得到念大學的機會，可想而知身邊的人應該也是冷言冷語，27歲了才在念大學。<br>仔細想想，德國是世界工業強國，或許大家可以多想想這之間的細節，然後反省自己。</p><h2 id="謝謝隊友"><a href="#謝謝隊友" class="headerlink" title="謝謝隊友"></a>謝謝隊友</h2><p>感謝大家，沒有大家就沒有這場比賽。<br><img src="https://i.imgur.com/exkJf8f.png" alt="Imgur"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;之前想說要紀錄一下去年的 SC16 參賽心得結果拖著沒寫，現在 ASC17 都結束了，那就先寫 ASC17 吧&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>真人不露相，露相不真人</title>
    <link href="https://geniustanley.github.io/2017/06/02/%E7%9C%9F%E4%BA%BA%E4%B8%8D%E9%9C%B2%E7%9B%B8%EF%BC%8C%E9%9C%B2%E7%9B%B8%E4%B8%8D%E7%9C%9F%E4%BA%BA/"/>
    <id>https://geniustanley.github.io/2017/06/02/%E7%9C%9F%E4%BA%BA%E4%B8%8D%E9%9C%B2%E7%9B%B8%EF%BC%8C%E9%9C%B2%E7%9B%B8%E4%B8%8D%E7%9C%9F%E4%BA%BA/</id>
    <published>2017-06-01T19:03:59.000Z</published>
    <updated>2020-10-13T06:48:10.699Z</updated>
    
    <content type="html"><![CDATA[<p>剛剛看到 <a href="https://www.airbnb.com.tw/">Airbnb</a> 認明葛宏為全球副總裁，突然想起上次看到 <code>全球副總裁</code> 這個職稱的那天</p><a id="more"></a><p>還記得 2016 11月 去美國鹽湖城參加 <a href="http://sc16.supercomputing.org/studentssc/student-cluster-competition/">Student Cluster Competition - SC16</a> 的競賽</p><p>忘了是比賽期間的哪一天，正當我回到座位上時，發現了一個亞洲人正在跟隊友講話</p><p>我記得他圍了一條超誇張的螢光綠圍巾，帶著眼鏡，瘦瘦的，非常斯文，一開始我猜測他應該是參展的人，剛好看到同樣來自台灣的我們所以來搭話</p><p>他看到我坐下來加入聽他說話的行列，所以分了一些目光給我，然而滿有趣的是，那不是打招呼的目光，當然，一點惡意也沒有，那目光我無法分辨含意，所以我也很有興趣的開始聽他說話，想猜測他想表達什麼</p><p>他說話不算快，音量也不甚大，我一開始很難抓住他說話的重點，他似乎是邊想邊講，但是越聽越覺得內容滿有趣的，是一些產業發展與競爭的故事 ( 有關電腦的事情，可能很多人不會覺得有趣-.- )</p><p>當然，身為一個好的聽眾，發問是對說話者表示尊重的方式，我們也有簡單的問一些問題，而他也一一回答</p><p>由於一般來搭話的人通常是問些問題，或者簡單的自我介紹，講故事這種事情前所未聞，當然我們也沒什麼意見，就聽聽故事開開眼界</p><p>重點來了，他說完故事也不拖泥帶水，竟然就走了</p><p>走之前他給了我們一張名片，跟我們說如果以後有問題，可以讓老師聯絡他</p><p>我記得名片上寫著</p><h2 id="Nvidia-全球副總裁"><a href="#Nvidia-全球副總裁" class="headerlink" title="Nvidia 全球副總裁"></a>Nvidia 全球副總裁</h2><p>真人不露相，露相不真人</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;剛剛看到 &lt;a href=&quot;https://www.airbnb.com.tw/&quot;&gt;Airbnb&lt;/a&gt; 認明葛宏為全球副總裁，突然想起上次看到 &lt;code&gt;全球副總裁&lt;/code&gt; 這個職稱的那天&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Migrate Hexo comment from disqus to gitment</title>
    <link href="https://geniustanley.github.io/2017/05/23/Migrate-Hexo-comment-from-disqus-to-gitment/"/>
    <id>https://geniustanley.github.io/2017/05/23/Migrate-Hexo-comment-from-disqus-to-gitment/</id>
    <published>2017-05-23T13:35:01.000Z</published>
    <updated>2020-10-13T06:48:10.691Z</updated>
    
    <content type="html"><![CDATA[<p>與 <a href="https://disqus.com/">Disqus</a> 類似的 <a href="http://www.weibo.com/duoshuo">多說</a> 即將要關閉了，許多人換到以 Github Issue 為 base 的 gitment</p><a id="more"></a><p>話說 <code>Github</code> 章魚好可愛喔 &gt;////&lt;</p><p>其實多說要關閉跟我換 gitment 沒關係，純粹是我比較喜歡 gitment</p><h1 id="Gitment"><a href="#Gitment" class="headerlink" title="Gitment"></a><a href="https://github.com/imsun/gitment">Gitment</a></h1><p><img src="https://i.imgur.com/eihTuzi.png" alt="Imgur"></p><h2 id="優點"><a href="#優點" class="headerlink" title="優點"></a>優點</h2><ul><li>用 Github Login ( 相信來看這邊逛逛的人有 Github 帳號應該多於 Disqus 帳號 )</li><li>支援 markdown ( 可以貼 code )</li><li>用 Github Issue 來管理 comment ( 我比較常上 github 以及我對 github 的愛 )</li><li>可以自行修改 css ( 滿喜歡 default 的設定所以我目前沒動 )</li><li>放一些 code 在前端就可以，不用改 server</li></ul><p><img src="https://i.imgur.com/ZWE0fBH.png" alt="Imgur"></p><h2 id="缺點"><a href="#缺點" class="headerlink" title="缺點"></a>缺點</h2><ul><li>訪客要留言要用 Github Login 然後 Authorize ( 那個 Authorize 頁面滿可怕的其實，有種當年 Facebook Authorize 在各個網站滿天飛的陰影 = = ，不過不要害怕，用力給他按下去 )</li><li>每發一篇文作者都需要去 initial 一下，之後訪客才能留言，因為要在 Github repo 裡面創造一個 Issue</li></ul><p><img src="https://i.imgur.com/yAs8SpA.png" alt="Imgur"></p><h2 id="安裝"><a href="#安裝" class="headerlink" title="安裝"></a>安裝</h2><p>基本的安裝看 <a href="https://github.com/imsun/gitment">Gitment</a> 的 github 就可以了，包括申請 Github OAuth，這邊主要小提一下 Hexo 部份的修改</p><h2 id="開始動手改ㄅ"><a href="#開始動手改ㄅ" class="headerlink" title="開始動手改ㄅ"></a>開始動手改ㄅ</h2><p>我用的 hexo theme 是用 <a href="https://pugjs.org/api/getting-started.html">pug (jade)</a> 寫的，不會跟 html 差很多啦</p><p>找到 head 的部份，新增 css</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">link(rel&#x3D;&quot;stylesheet&quot;, href&#x3D;url_for(&quot;https:&#x2F;&#x2F;imsun.github.io&#x2F;gitment&#x2F;style&#x2F;default.css&quot;))</span><br></pre></td></tr></table></figure><p>在 <code>_config.yml</code> 中新增剛剛申請好的資料</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># Comment</span><br><span class="line"># e.g disqus: seansun</span><br><span class="line">disqus:</span><br><span class="line">duoshuo:</span><br><span class="line">gitment:</span><br><span class="line">  owner: 你的 Github 帳號</span><br><span class="line">  repo: 新建立準備放 comment 的 repo</span><br><span class="line">  client_id: 剛剛申請的 client_id</span><br><span class="line">  client_secret: 剛剛申請的 client_secret</span><br></pre></td></tr></table></figure><p>在 comment 部份 ( 你可以 grep 一下 Disqus 放哪邊，就放他下面 ) 加上 gitment 需要的 js</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">if theme.gitment</span><br><span class="line">     #gitmentContainer</span><br><span class="line">     link(rel&#x3D;&#39;stylesheet&#39;, href&#x3D;&#39;https:&#x2F;&#x2F;imsun.github.io&#x2F;gitment&#x2F;style&#x2F;default.css&#39;)</span><br><span class="line">     script(src&#x3D;&#39;https:&#x2F;&#x2F;imsun.github.io&#x2F;gitment&#x2F;dist&#x2F;gitment.browser.js&#39;)</span><br><span class="line">     script.</span><br><span class="line">       var gitment &#x3D; new Gitment(&#123;</span><br><span class="line">         owner: &#39;#&#123;theme.gitment.owner&#125;&#39;,</span><br><span class="line">         repo: &#39;#&#123;theme.gitment.repo&#125;&#39;,</span><br><span class="line">         oauth: &#123;</span><br><span class="line">           client_id: &#39;#&#123;theme.gitment.client_id&#125;&#39;,</span><br><span class="line">           client_secret: &#39;#&#123;theme.gitment.client_secret&#125;&#39;,</span><br><span class="line">         &#125;,</span><br><span class="line">       &#125;)</span><br><span class="line">       gitment.render(&#39;gitmentContainer&#39;)</span><br></pre></td></tr></table></figure><h2 id="完成"><a href="#完成" class="headerlink" title="完成"></a>完成</h2><p>完成後記得</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo clean;</span><br><span class="line">hexo g;</span><br></pre></td></tr></table></figure><h2 id="警告"><a href="#警告" class="headerlink" title="警告"></a>警告</h2><p>每發一篇文都要 Initial 一次，不要不小心重複 Initial，雖然不會壞掉但是會產生兩篇 Issue 有點醜，而且 Github 的 Issue 是不能刪除的，只能 Close</p><p><img src="https://i.imgur.com/eihTuzi.png" alt="Imgur"></p><h2 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h2><p>雖然 gitment 頗帥，但 <a href="https://disqus.com/">DISQUS</a> 樸素簡單還是我的愛 &lt;3 ( 2018.01.21 )</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;與 &lt;a href=&quot;https://disqus.com/&quot;&gt;Disqus&lt;/a&gt; 類似的 &lt;a href=&quot;http://www.weibo.com/duoshuo&quot;&gt;多說&lt;/a&gt; 即將要關閉了，許多人換到以 Github Issue 為 base 的 gitment&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>考試公平嗎？</title>
    <link href="https://geniustanley.github.io/2017/04/14/%E8%80%83%E8%A9%A6%E5%85%AC%E5%B9%B3%E5%97%8E/"/>
    <id>https://geniustanley.github.io/2017/04/14/%E8%80%83%E8%A9%A6%E5%85%AC%E5%B9%B3%E5%97%8E/</id>
    <published>2017-04-13T20:16:07.000Z</published>
    <updated>2020-10-13T06:48:10.699Z</updated>
    
    <content type="html"><![CDATA[<p>考試這種公平的競爭真的好嗎？</p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>看到阮一峰的這篇 <a href="http://www.ruanyifeng.com/blog/2016/10/online_education.html">网络文凭，你要不要</a></p><p>我不完全同意他的觀點，也覺得有點廣告文的嫌疑</p><p>不過阮一峰這種身份的人物，我認為他不至於單純為了錢而說些言不由衷的話砸了自己的招牌，或許有些人覺得內容偏激了些，不過我相信阮一峰多多少少也是這樣想的，畢竟他自己也非本科系出身</p><p>這篇文章中提到一篇<a href="http://www.jiemian.com/article/887630.html">【JMedia】诺贝尔奖得主：东亚教育浪费了太多生命</a></p><p>下面這段滿有趣的</p><h2 id="內文"><a href="#內文" class="headerlink" title="內文"></a>內文</h2><p>很多对联考的辩解，都是说，虽然联考不尽如人意，但是是最公平的。这是儒家传统上”不患寡而患不均”思想的影响。公平并没有错，但是如果为了公平，就反而一刀切压制了不同类型的人才发展途径，那就很可悲了。东亚国家的人口基数那么大，这种人才浪费的机会成本也是高得很难估量。</p><p>举个其他国家的例子。欧洲学术界有个比较，像英国和德国都算是古典学术的学霸类国家，但是英国这方面的人才要出色不少。究其原因，反而是因为英国的教育制度不够公平。英国有一些中学进去后由于传统原因，上好大学的可能性非常高，这样里面的学生很早就可以不慌不忙地淫浸在庞大的古典学术中。</p><p>反过来，德国比较公平，所有学生上大学都要通过考核，这样，学生反而要花更多精力在通用的备考科目上面。结果英国这种表面的不公平反而有可能造就优质人才。</p><p>这就像彼得·提尔的《从0到1》中的举的商业上的例子，表面上完全竞争好像比较公平，实际上参加这样竞争的企业利润会变得像刀刃一样薄，朝不保夕，只能顾着眼前利益，不可能对未来做长远规划。</p><p>而类似谷歌这样的垄断企业，因为不用记挂着和其他企业竞争，反而可以由更大的自主权关心自己的产品和做各种长远得简直不靠谱的计划。所以学生如果长期处在考试的竞争压力下，自然也就不可能有长远的自我成长计划，而只能把心思集中在将会决定一生道路的一次次考试上。</p><h2 id="心得"><a href="#心得" class="headerlink" title="心得"></a>心得</h2><p>事實上依我自己的感覺我是覺得德國比英國先進啦，可能我只關心車子或工業設計之類的，所以我覺得那段看看就好</p><p>我覺得有趣的是後半段</p><p><strong>考試講求公平這件事情不就違反了成功最重要的法則， <code>避免競爭嗎</code> ？</strong></p><p>你可能跟我說 LBJ 努力練習是種競爭，你可能也會說 Kobe Bryant 刻苦練習所以也是在競爭</p><p>很抱歉，一般人跟 LBJ 連競爭都談不上，你就算一天打 20 小時的球只睡 4 小時，你一輩子也打不過 LBJ，所以 LBJ 很聰明的選擇了籃球當職業而不是科學家，所以他也是在避免競爭</p><p>從上面的例子應該可以很清楚的看出全台灣的 18 歲大好青年都要考同一個考試有多愚蠢了吧，還真別說研究所的入學標準是讓 22 歲的成人去考一堆低能的考古題考試</p><p><code>XXXX學起來總有一天會用到的</code>，這句話真是聽到爛，聽到廢，真的是最拉機的說詞</p><p><code>時間有限</code> 這四個字不知道有幾個人看懂，人生短短幾年，時間有限，就算普物會在競程的某一題用到，會在研究殺小電路的時候用到，都<code>關我屁事</code>，我沒必要花一年的時間學這些拉機，同樣的話身為資工系學生的我，現在也很想送給地理，歷史，公民，國文，化學，就算<code>總有一天會用到</code>，那我也願意<code>用到的時候再學</code>，而不是花 7歲到 18歲 去學一些 <code>可能會用到</code>的東西</p><p>我覺得順序是這樣的，我喜歡畫圖，我喜歡程式，某天我開始研究該如何讓程式畫圖，而因為我的興趣而培養的這些專長所以發揮了巨大的效用</p><p>而不是<code>因為普物有可能會用到所以強迫 120 個學生都要學</code>，再來祈禱某天可能會跟程式沾上點邊，甚至拿普物的成績當成 GPA 也算在申請研究推甄的分數裡，真他媽夠可笑的</p><p>我承認這世界是競爭的，就是因為這世界的競爭無法避免，所以每個成功人士都在做一件事情 <code>做自己最擅長的事，持續建立高牆，避免競爭</code></p><p>反觀我們的教育體制呢？ <code>不準跟別人不一樣，大家要公平的競爭，最好是全台灣 30 萬國中生無差別的低能競爭，PR99 的就可以進建中喔</code></p><p>我知道不考試這個社會的問題大概會更多，會有更多人吵成一團，所以執政者會跟你說這是目前最好的解決辦法，無差別的公平競爭，這也是最簡單的辦法</p><p>所以我也一直認為繳稅是浪費錢，正因為好的辦法很難想，所以花錢給你想，花錢請你想，結果想出來的結果永遠是最無腦的</p><p>如果人民是國家的老闆，那這個身為人民公僕的政府領老闆的錢真的是領的超廢，那些老屁股整天在跟年輕人說 <code>老闆請你來解決問題，我還要擔心的話，那請你幹麻</code>，這句話真的可以原封不動的送還給現在的政府，付錢給你就是解決問題的，2017 年了，教育到底進步了什麼？</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;考試這種公平的競爭真的好嗎？&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>閉嘴的藝術</title>
    <link href="https://geniustanley.github.io/2017/04/07/%E9%96%89%E5%98%B4%E7%9A%84%E8%97%9D%E8%A1%93/"/>
    <id>https://geniustanley.github.io/2017/04/07/%E9%96%89%E5%98%B4%E7%9A%84%E8%97%9D%E8%A1%93/</id>
    <published>2017-04-06T18:37:28.000Z</published>
    <updated>2020-10-13T06:48:10.699Z</updated>
    
    <content type="html"><![CDATA[<p>關於如何藝術性的閉嘴</p><a id="more"></a><h2 id="這篇文章在談什麼？"><a href="#這篇文章在談什麼？" class="headerlink" title="這篇文章在談什麼？"></a>這篇文章在談什麼？</h2><p>接案也一段時間了，雖然不敢說多有心得，不過也累積了一些想法跟經驗，是說好像從來沒分享過這些想法，沒想到第一次竟然是分享該怎麼藝術性的<strong>閉嘴</strong></p><p>而閉嘴這件事我覺得不只適用於軟體商業接案，而是適用於很多地方</p><p><strong>以下皆為個人想法以及個人經驗，沒針對任何人，還請原諒我的偏激</strong></p><h2 id="事情是這樣子der"><a href="#事情是這樣子der" class="headerlink" title="事情是這樣子der"></a>事情是這樣子der</h2><p>有別於待在辦公室上班，只要摸熟老闆同事下屬的脾氣就能悠遊自在，就算不能如於得水，至少能安身立命，然而 <strong>接案</strong> 卻是完全相反的事情，每次面對的都是不同的人，不同的行業，不同的習慣，不同的脾氣</p><p>合作過一些外系的教授之後我觀察到一些有趣的現象。</p><p>我發現學歷越高，特別是某些教授，或者某些錢不是從自己口袋拿出來的人，這些人 <strong>非常不尊重專業，總以為自己很懂</strong>，可能平常過慣了告訴學生該怎麼做該怎麼做的生活，反正學生就是哀求畢業證書的狗，學生不反駁你，你就還真以為自己是什麼咖，就算是某些頂尖外國大學博士畢業的，我也看不出來這些人對自己不懂的東西有絲毫尊重，平常能稱得上稍微扯到錢的活動不就是科技部的計畫經費，而科技部計畫也是年復一年一模一樣的申請方式，說穿了只是誰了解遊戲規則誰就申請的到，最潮的名詞寫上去，跟商業運作的世界還是有落差的。<code>&quot;這件事情就是我說的這樣&quot;</code> 這種惡劣的態度或許在自己的實驗室行得通，在外面我看是完全不行。</p><p>由於現在寫程式的門檻 <strong>太低</strong>，導致一堆人以為自己會的不要不要的，如果這麼強，真的不需要找我們，既然找了專業的，又要嘴砲自己很懂，這種心態我實在是搞不懂，然而這些雷是必須踩的，也只有踩過了下次才不會再被炸，現在看人也比較準，可以輕易的辨別自以為是到什麼程度。</p><p>寫這篇文同時也警惕自己，以後不管我權力多大，位子多高，對於商業合作夥伴，員工等等，不懂的領域就該虛心求教，先問問對方的意見再開口，而不是開口就一副我最懂的這種鳥態度，付了錢絕對不是老大，付錢給專業的人就該尊重對方的專業，不然乾脆一開始找個人付錢給他當我奴隸就好。</p><h2 id="先說結論"><a href="#先說結論" class="headerlink" title="先說結論"></a>先說結論</h2><p>不懂的事情就閉嘴，就算是美國總統也一樣，不會因為學歷是博士或職位是 CEO 你就上知天文下知地理。</p><h2 id="教授H"><a href="#教授H" class="headerlink" title="教授H"></a>教授H</h2><p>讓我們先談談教授H，需求很簡單，做個問卷，再用 chartjs 視覺化，由於教授H堅持不要Google問卷，一定要手刻，合理的做法就是開個 Google sheet，用 API 把資料丟進去，</p><p>然而教授H說了以下幾段讓我印象深刻的話</p><blockquote><p>這應該很簡單吧，我也寫過程式</p></blockquote><blockquote><p>我很重視美觀 ( 廠廠 )</p></blockquote><blockquote><p>網站整個弄完要再寫成一個自解壓縮的 rar 檔案，讓我可以在任何有 WAMP 的地方把網站裝起來</p></blockquote><blockquote><p>我不要放在Google，不准用 Google sheet 當資料庫，Google會倒我們不會 ( 最後我把問卷跟資料庫一格一格對起來 )</p></blockquote><blockquote><p>所有東西都要放在我們 server 上，只能用 WAMP ( Windows + Apache + MySQL + PHP )</p></blockquote><blockquote><p>我沒辦法開 ftp 給你，因為 server 上還有其他網站，你要把整個 WAMP 弄好，然後過來實驗室 ( 所以每次要更新 web 我人要跑到他們實驗室 )，用 teamviewer copy 進去，</p></blockquote><blockquote><p>那些網址幹麻的 domain 開給你，沒得測試，跟我們 server 對不到你自己想辦法</p></blockquote><blockquote><p>問卷 22px 字太小，我沒帶眼鏡看不到 ( 重點是問卷是要給別人看的 )</p></blockquote><blockquote><p>24px 的字你要自己想辦法排版，只能一頁，我不要頁面有 scroll，我的螢幕解析度多少我不知道，但是就是不行有 scroll</p></blockquote><blockquote><p>問卷分數怎麼這樣算？ ( 上禮拜自己說要這樣算der廠廠 )</p></blockquote><p>阿～聽說這位大師在外面開課都非常的昂貴阿，然而這種程度真是令人不敢恭維呢，我一直在想，那些把這位教授當神拜的學生，到底學到了什麼呢？</p><p><strong>先分享一位，最近比較忙，之後有空一個一個慢慢分享</strong></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;關於如何藝術性的閉嘴&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Functional programming 為什麼要 immutable？</title>
    <link href="https://geniustanley.github.io/2017/04/01/Functional-programming-%E7%82%BA%E4%BB%80%E9%BA%BC%E8%A6%81-immutable%EF%BC%9F/"/>
    <id>https://geniustanley.github.io/2017/04/01/Functional-programming-%E7%82%BA%E4%BB%80%E9%BA%BC%E8%A6%81-immutable%EF%BC%9F/</id>
    <published>2017-04-01T09:08:24.000Z</published>
    <updated>2020-10-13T06:48:10.690Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>由於硬體軟體執行效能的突破等種種原因，很久以前就已經存在的 functional programming 現在可謂大紅大紫，許多語言都紛紛開始往 functional programming 靠攏，或者提供相關函數</p><h2 id="這篇文章在說什麼？"><a href="#這篇文章在說什麼？" class="headerlink" title="這篇文章在說什麼？"></a>這篇文章在說什麼？</h2><p>或許你有學過 functional programming 也或許沒有</p><p>不過這都不重要，我們在這篇文章中只 <code>簡單舉例</code> <strong>immutable</strong> 的好處</p><p><strong>只要你會很基本的 javascript，我保證每件事情都是你已經會的</strong></p><h2 id="阿什麼是-immutable-？-好處是什麼-？"><a href="#阿什麼是-immutable-？-好處是什麼-？" class="headerlink" title="阿什麼是 immutable ？ 好處是什麼 ？"></a>阿什麼是 <strong>immutable</strong> ？ 好處是什麼 ？</h2><p>與其說一串沒人看得懂的定義說明什麼是 <strong>immutable</strong>，我直接做給你看，看完你就知道了</p><h2 id="計算機"><a href="#計算機" class="headerlink" title="計算機"></a>計算機</h2><p>這是一個簡單的 <code>加法乘法</code> 計算機</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Calculator = <span class="function"><span class="keyword">function</span> (<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.number = n;</span><br><span class="line">&#125;;</span><br><span class="line">　</span><br><span class="line">Calculator.prototype.add = <span class="function"><span class="keyword">function</span> (<span class="params">c</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.number += c.number;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">&#125;;</span><br><span class="line">　</span><br><span class="line">Calculator.prototype.multiple = <span class="function"><span class="keyword">function</span> (<span class="params">c</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.number *= c.number;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">&#125;</span><br><span class="line">　</span><br><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> Calculator(<span class="number">4</span>);</span><br><span class="line"><span class="keyword">var</span> b = <span class="keyword">new</span> Calculator(<span class="number">2</span>);</span><br><span class="line"><span class="keyword">var</span> c = <span class="keyword">new</span> Calculator(<span class="number">0</span>);</span><br><span class="line">　</span><br><span class="line"><span class="comment">// (4 + 0) * 2 + (4 * 2) = 16</span></span><br><span class="line"><span class="keyword">var</span> result = a.add(c).multiple(b).add(a.multiple(b)).number;</span><br><span class="line">　</span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">// 32 </span></span><br><span class="line"><span class="comment">// 答案不對 QQ</span></span><br><span class="line"><span class="comment">// 因為 A 被 修改(mutate) 了</span></span><br></pre></td></tr></table></figure><p>因為會<code>修改(mutate)</code>到物件，所以會壞掉QQ</p><p><code>mutate</code> 的中文是 <code>變化</code>，但是用 <code>變化</code> 很詭異 = =，所以我文中的 <code>修改</code> 就是 <code>mutate</code></p><ol><li>a.add(c).multiple(b) 結束的時候 a.number 被改成 8</li><li>a 在 a.multiple(b) 結束的時候就會被改成 8*2 = 16</li><li>最後變成 16.add(16) 變成 32</li></ol><h2 id="immutable-過的計算機"><a href="#immutable-過的計算機" class="headerlink" title="immutable 過的計算機"></a>immutable 過的計算機</h2><p>感謝 <a href="https://github.com/DingWeizhe">DingWeizhe</a> 提供的建議以及 <a href="https://gist.github.com/DingWeizhe/babb0258639972306e76aed7f5182f84">code</a></p><p>不直接修改並回傳 input，而<code>重新創造一個回傳的物件</code></p><p>這次答案就是對的了</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Calculator = <span class="function"><span class="keyword">function</span> (<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.number = n;</span><br><span class="line">&#125;;</span><br><span class="line">　</span><br><span class="line">Calculator.prototype.add = <span class="function"><span class="keyword">function</span> (<span class="params">c</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> Calculator(<span class="built_in">this</span>.number + c.number);</span><br><span class="line">&#125;;</span><br><span class="line">　</span><br><span class="line">Calculator.prototype.multiple = <span class="function"><span class="keyword">function</span> (<span class="params">c</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> Calculator(<span class="built_in">this</span>.number * c.number);</span><br><span class="line">&#125;</span><br><span class="line">　</span><br><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> Calculator(<span class="number">4</span>);</span><br><span class="line"><span class="keyword">var</span> b = <span class="keyword">new</span> Calculator(<span class="number">2</span>);</span><br><span class="line"><span class="keyword">var</span> c = <span class="keyword">new</span> Calculator(<span class="number">0</span>);</span><br><span class="line">　</span><br><span class="line"><span class="keyword">var</span> result = a.add(c).multiple(b).add(a.multiple(b)).number;</span><br><span class="line">　</span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">// 16</span></span><br></pre></td></tr></table></figure><h2 id="再更-functional-的計算機"><a href="#再更-functional-的計算機" class="headerlink" title="再更 functional 的計算機"></a>再更 functional 的計算機</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> add = <span class="function"><span class="keyword">function</span>(<span class="params">c1, c2</span>) </span>&#123; <span class="keyword">return</span> c1 + c2; &#125;;</span><br><span class="line"><span class="keyword">var</span> multiple = <span class="function"><span class="keyword">function</span>(<span class="params">c1, c2</span>) </span>&#123; <span class="keyword">return</span> c1 * c2; &#125;;</span><br><span class="line">　</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">4</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">var</span> c = <span class="number">0</span>;</span><br><span class="line">　</span><br><span class="line"><span class="keyword">var</span> result = add(</span><br><span class="line">  multiple(b, add(a, c)), multiple(a, b)</span><br><span class="line">);</span><br><span class="line">　</span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">// 16</span></span><br></pre></td></tr></table></figure><p>將將，答案對了，因為新版 <code>coding 時不需要去紀錄目前a的狀態</code></p><h2 id="es6-version"><a href="#es6-version" class="headerlink" title="es6 version"></a>es6 version</h2><p>這邊看不懂沒關係，就是語法比較新的 javascript</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> add = <span class="function">(<span class="params">c1, c2</span>) =&gt;</span> (c1 + c2);</span><br><span class="line"><span class="keyword">var</span> multiple = <span class="function">(<span class="params">c1, c2</span>) =&gt;</span> (c1 * c2);</span><br><span class="line">　</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">4</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">var</span> c = <span class="number">0</span>;</span><br><span class="line">　</span><br><span class="line"><span class="comment">// 稍微簡化一下原本的 function</span></span><br><span class="line"><span class="comment">// 改成 2 * (4 + 4)</span></span><br><span class="line"><span class="keyword">var</span> result = multiple(b, add(a, a));</span><br><span class="line">　</span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">// 16</span></span><br></pre></td></tr></table></figure><h2 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h2><p>上面的例子簡單說明了 <strong>immutable</strong> 的好處，所謂 <strong>immutable</strong> 就是 <strong>不可變的</strong></p><p>functional 版本的計算機裡面，沒有任何一行程式碼打算去 <code>修改變數</code> ( 我們可以發現原版的計算機中有試圖修改變數 <code>this.number += c.number</code> )</p><p>當你完全不在 function 內修改變數時，你的 function 就會變成 <code>pure function</code>，code 也會變成 <code>stateless programming</code></p><p>我們可以看一下 <a href="https://www.quora.com/What-is-stateless-programming-and-what-are-some-examples">Quora上的回答</a></p><blockquote><p>Stateless programming is a paradigm in which the operations (functions, methods, procedures, whatever you call them) you implement are not sensitive to the state of the computation.</p></blockquote><h2 id="are-not-sensitive-to-the-state-of-the-computation"><a href="#are-not-sensitive-to-the-state-of-the-computation" class="headerlink" title="are not sensitive to the state of the computation"></a>are not sensitive to the state of the computation</h2><p>上述這段是原版壞掉的計算機缺少的概念</p><p>reference: <a href="https://www.gitbook.com/book/drboolean/mostly-adequate-guide">mostly-adequate-guide</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;

&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;由於硬體軟體執行效能的突破等種種原因，很久以前就已經存在的 functional programmin</summary>
      
    
    
    
    
    <category term="web" scheme="https://geniustanley.github.io/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>UVa 10616 - Divisible Group Sums</title>
    <link href="https://geniustanley.github.io/2017/03/28/UVa-10616-Divisible-Group-Sums/"/>
    <id>https://geniustanley.github.io/2017/03/28/UVa-10616-Divisible-Group-Sums/</id>
    <published>2017-03-27T17:53:03.000Z</published>
    <updated>2020-10-13T06:48:10.693Z</updated>
    
    <content type="html"><![CDATA[<p>0-1 背包問題，用 DP 解</p><a id="more"></a><p><a href="https://uva.onlinejudge.org/external/106/10616.pdf">10616 - Divisible Group Sums</a></p><h2 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h2><p>秒殺之後吃了 <code>TLE</code>，想半天結果還是看高手解 T_T</p><p>用 <code>dp[i][j][k]</code> 紀錄狀態</p><p><code>i</code> 代表目前選到 <code>N</code> 個裡面第幾個</p><p><code>j</code> 代表目前<code>選了幾個</code></p><p><code>k</code> 代表 <code>mod D</code> 的值</p><h2 id="狀態轉移式"><a href="#狀態轉移式" class="headerlink" title="狀態轉移式"></a>狀態轉移式</h2><p><code>dp[i][j][k] = dp[i-1][j][k] + dp[i-1][j-1][x]</code></p><p>其中 <code>(x + n[i] % D) % D = k</code> ( n[i] 先 mod D 的原因是因為避免超過 <code>int</code> 的範圍 )</p><p><code>dp[i][j][k]</code> 來自兩種狀態，選 <code>i</code> 不選 <code>i</code></p><p>選擇 <code>i</code>: <code>dp[i-1][j-1][x]</code></p><p>不選 <code>i</code>: <code>dp[i-1][j][k]</code></p><h2 id="code"><a href="#code" class="headerlink" title="code"></a>code</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">int</span> n[<span class="number">205</span>];</span><br><span class="line"><span class="keyword">int</span> N, Q;</span><br><span class="line"><span class="keyword">int</span> D, M;</span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">205</span>][<span class="number">15</span>][<span class="number">25</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">memset</span>(dp, <span class="number">0</span>, <span class="keyword">sizeof</span>(dp));</span><br><span class="line"></span><br><span class="line">  dp[<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= M; j++) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; D; k++) &#123;</span><br><span class="line">        <span class="comment">// 不選 i</span></span><br><span class="line">        dp[i][j][k] += dp[i<span class="number">-1</span>][j][k];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 選 i</span></span><br><span class="line">        <span class="keyword">if</span> (j) &#123;</span><br><span class="line">          <span class="keyword">int</span> x = (D + k - n[i<span class="number">-1</span>] % D) % D; </span><br><span class="line">          dp[i][j][k] += dp[i<span class="number">-1</span>][j<span class="number">-1</span>][x];</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> dp[N][M][<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> c = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (EOF != <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;N, &amp;Q) &amp;&amp; (N || Q)) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;SET %d:\n&quot;</span>, c++);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">      <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n[i]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; Q; i++) &#123;</span><br><span class="line">      <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;D, &amp;M);</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;QUERY %d: %d\n&quot;</span>, i+<span class="number">1</span>, solve());</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>reference: <a href="http://www.cnblogs.com/staginner/archive/2011/12/17/2291386.html">staginner</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;0-1 背包問題，用 DP 解&lt;/p&gt;</summary>
    
    
    
    
    <category term="UVa" scheme="https://geniustanley.github.io/tags/UVa/"/>
    
    <category term="0-1Knapsack" scheme="https://geniustanley.github.io/tags/0-1Knapsack/"/>
    
  </entry>
  
  <entry>
    <title>UVa 11790 - Murcia&#39;s Skyline</title>
    <link href="https://geniustanley.github.io/2017/03/25/UVa-11790-Murcia-s-Skyline/"/>
    <id>https://geniustanley.github.io/2017/03/25/UVa-11790-Murcia-s-Skyline/</id>
    <published>2017-03-25T09:36:51.000Z</published>
    <updated>2020-10-13T06:48:10.695Z</updated>
    
    <content type="html"><![CDATA[<p><code>O(N^2)</code> LIS</p><a id="more"></a><p><a href="https://uva.onlinejudge.org/external/117/11790.pdf">11790 - Murcia’s Skyline</a></p><h2 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h2><p>一開始想的太難了</p><p>由於 <code>LIS</code> 是要對寬度取最大，我用 <code>O(NlongL)</code> 的方法結果爆了</p><p>應該一開始就用爛一點但是好寫的 <code>O(N^2)</code> ( 大概 3 分鐘就可以寫完了 )，如果 <code>TLE</code> 再想其他辦法</p><h2 id="code"><a href="#code" class="headerlink" title="code"></a>code</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 10005</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">int</span> T, N;</span><br><span class="line">  <span class="keyword">int</span> h[MAX], w[MAX], upper[MAX], lower[MAX];</span><br><span class="line">  <span class="keyword">int</span> increase, decrease;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;T);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> t = <span class="number">1</span>; t &lt;= T; t++) &#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;N);</span><br><span class="line"></span><br><span class="line">    increase = <span class="number">0</span>, decrease = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">      <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;h[i]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">      <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;w[i]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">      upper[i] = lower[i] = w[i];</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (h[j] &lt; h[i] &amp;&amp; upper[i] &lt; upper[j] + w[i]) &#123;</span><br><span class="line">          upper[i] = upper[j] + w[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (h[j] &gt; h[i] &amp;&amp; lower[i] &lt; lower[j] + w[i]) &#123;</span><br><span class="line">          lower[i] = lower[j] + w[i];</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (upper[i] &gt; increase) increase = upper[i];</span><br><span class="line">      <span class="keyword">if</span> (lower[i] &gt; decrease) decrease = lower[i];</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (increase &gt;= decrease) &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;Case %d. Increasing (%d). Decreasing (%d).\n&quot;</span>, t, increase, decrease);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;Case %d. Decreasing (%d). Increasing (%d).\n&quot;</span>, t, decrease, increase);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>reference: <a href="http://blog.csdn.net/mobius_strip/article/details/40264311">小白菜又菜</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;code&gt;O(N^2)&lt;/code&gt; LIS&lt;/p&gt;</summary>
    
    
    
    
    <category term="UVa" scheme="https://geniustanley.github.io/tags/UVa/"/>
    
  </entry>
  
  <entry>
    <title>cPanel 上 addons domain 存在 public_html 外面</title>
    <link href="https://geniustanley.github.io/2017/03/23/cPanel-%E4%B8%8A-addons-domain-%E5%AD%98%E5%9C%A8-public-html-%E5%A4%96%E9%9D%A2/"/>
    <id>https://geniustanley.github.io/2017/03/23/cPanel-%E4%B8%8A-addons-domain-%E5%AD%98%E5%9C%A8-public-html-%E5%A4%96%E9%9D%A2/</id>
    <published>2017-03-23T15:29:27.000Z</published>
    <updated>2020-10-13T06:48:10.698Z</updated>
    
    <content type="html"><![CDATA[<p>架設多網域網站，把 <code>document root</code> 放在 <code>public_html</code> 外面的方法</p><a id="more"></a><p>由於客戶要增加一個新的網站在同一台 server 上</p><p>今天當我正要把買好的 domain 設定到 server</p><p>但是！！！</p><p>遇到一個問題</p><h2 id="只能把資料放在-public-html-底下"><a href="#只能把資料放在-public-html-底下" class="headerlink" title="只能把資料放在 public_html 底下"></a>只能把資料放在 <code>public_html</code> 底下</h2><p>本來我已經抱持著必死的決心要把原本這樣的架構</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public_html&#x2F;A.php</span><br><span class="line">public_html&#x2F;B.php</span><br><span class="line">public_html&#x2F;C.php</span><br><span class="line">public_html&#x2F;D.php</span><br><span class="line">public_html&#x2F;E.php</span><br></pre></td></tr></table></figure><p>改成</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public_html&#x2F;網站1&#x2F;A.php</span><br><span class="line">public_html&#x2F;網站1&#x2F;B.php</span><br><span class="line">public_html&#x2F;網站1&#x2F;C.php</span><br><span class="line">public_html&#x2F;網站1&#x2F;D.php</span><br><span class="line">public_html&#x2F;網站1&#x2F;E.php</span><br><span class="line">public_html&#x2F;網站2&#x2F;A.php</span><br><span class="line">public_html&#x2F;網站2&#x2F;B.php</span><br><span class="line">public_html&#x2F;網站2&#x2F;C.php</span><br><span class="line">public_html&#x2F;網站2&#x2F;D.php</span><br><span class="line">public_html&#x2F;網站2&#x2F;E.php</span><br></pre></td></tr></table></figure><p>這樣會搞亂原本放在那邊的網站，而且資料超多，還有資料庫啥的，一定會死</p><p>後來竟然被我查到一個神解</p><p><a href="https://kb.site5.com/domains/how-to-host-a-domain-outside-of-the-public_html-directory/">Domains: How to Host a Domain Outside of the public_html Directory</a></p><h2 id="最重要的就是在-public-html-底下放一個-symbolic-link-連到家目錄底下的乾淨資料夾"><a href="#最重要的就是在-public-html-底下放一個-symbolic-link-連到家目錄底下的乾淨資料夾" class="headerlink" title="最重要的就是在 public_html 底下放一個 symbolic link 連到家目錄底下的乾淨資料夾"></a>最重要的就是在 public_html 底下放一個 symbolic link 連到家目錄底下的乾淨資料夾</h2><p>因為客戶的 server 不支援 <code>ssh</code>，而且也沒辦法在 cpanel 裡面直接 <code>ln -s</code>，查了一下發現大家要設定 <code>symbolic link</code> 都是用 <code>cron job</code> = =</p><h2 id="步驟如下"><a href="#步驟如下" class="headerlink" title="步驟如下"></a>步驟如下</h2><ol><li>去附加網域設定新的網域連到 <code>public_html/網站名稱</code> <img src="https://i.imgur.com/D9SSHkM.png" alt="Imgur"></li><li><code>cron job</code> 設定 <code>symbolic link</code> ( 先設定每分鐘跑，設定生效再刪掉 <code>cron job</code> 即可 ) <img src="https://i.imgur.com/ccWr1ju.png" alt="Imgur"></li><li>好了，就這麼簡單 = =</li></ol><p>是說，<code>cron job</code> 的警告標語也太可愛了吧 <img src="https://i.imgur.com/gidFkRP.png" alt="Imgur"></p><h2 id="精通"><a href="#精通" class="headerlink" title="精通"></a><code>精通</code></h2>]]></content>
    
    
    <summary type="html">&lt;p&gt;架設多網域網站，把 &lt;code&gt;document root&lt;/code&gt; 放在 &lt;code&gt;public_html&lt;/code&gt; 外面的方法&lt;/p&gt;</summary>
    
    
    
    
    <category term="web" scheme="https://geniustanley.github.io/tags/web/"/>
    
  </entry>
  
</feed>
